<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="C1" xml:space="preserve">
    <value>~/images/korean/connect_btn_korean.png</value>
  </data>
  <data name="C2" xml:space="preserve">
    <value>~/images/korean/already_purchased_btn_korean.png</value>
  </data>
  <data name="C3" xml:space="preserve">
    <value>~/images/Korean/website_btn_korean.png</value>
  </data>
  <data name="m1" xml:space="preserve">
    <value>환영합니다.</value>
  </data>
  <data name="m2" xml:space="preserve">
    <value>어디에서나 초고속 인터넷에 접속할 수 있습니다.</value>
  </data>
  <data name="m3" xml:space="preserve">
    <value>약관</value>
  </data>
  <data name="m4" xml:space="preserve">
    <value>전자식 고지 사항: The Leela Palace, New Delhi / 관련 지주 회사 / 관련 자회사 / 관련 그룹사, 기타 관련 법인, 각 임원, 이사, 대리인 및 직원(이하 모두 "호스트"라고 함) 및 Microsense Pvt. Ltd., 관련 계열사, 자회사, 기타 관련 법인, 각 임원, 이사, 대리인 및 직원(이하 모두 "계약자"라고 함)은 전화, 전기, 전자, 네트워크, 인터넷, 컴퓨터, 하드웨어 또는 소프트웨어 프로그램 오작동, 결함, 지연이나 장애, 또는 지체, 유실, 도난, 불법, 불완전, 왜곡, 잘못된 설명, 훼손 또는 요금 부족 우편물, 이메일, 양식 게시물, 연결, 메시지 또는 항목, 또는 해당되는 모든 문제가 있는 보안에 대해 책임을 지지 않습니다.</value>
  </data>
  <data name="m5" xml:space="preserve">
    <value>보안 규칙: 다음 행위를 포함하여(여기에 제한되지 않음) 사용자가 호텔 네트워크/광대역 인터넷 서비스의 보안을 침해하거나 침해하려는 시도는 금지되어 있습니다: (1) 해당 사용자용이 아닌 데이터에 액세스 또는 사용자의 액세스가 허가되지 않은 서버 또는 계정에 로그인, (2) 적절한 허가 없이 시스템 또는 네트워크의 취약성을 조사, 검사 또는 테스트하거나 보안 또는 인증 조치를 침해하려는 시도, (3) 바이러스 또는 "트로이 목마"를 웹 사이트에 전송, 오버로드, "플러드 공격", "메일 폭탄 보내기" 또는 "작동 중지"의 수단 등을 통해(여기에 제한되지 않음) 모든 사용자, 호스트 또는 네트워크가 사용하는 서비스를 방해하려는 시도, (4) 제품 또는 서비스의 홍보 및/또는 광고를 포함하여 원치 않는 이메일을 보내는 행위. 시스템 또는 네트워크 보안 침해로 인해 민형사상의 책임을 지게 될 수 있습니다. The Leela Palace, New Delhi 및/또는 관련 법인은 해당 위반 행위에 연루된 것으로 의심되는 사건을 조사할 권리를 보유하며, 해당 위반 행위에 연루된 사용자를 기소하고 그런 과정에서 사법 당국과 협력할 권리를 보유합니다.</value>
  </data>
  <data name="m6" xml:space="preserve">
    <value>준거법: 광대역 인터넷 서비스 사용과 관련하여 분쟁이 발생하는 경우, 해당 분쟁은 법의 충돌 원칙을 적용하지 않고 인도 법률에 따라 인도에 소재한 법정에서 해결됩니다. 이 계약서의 특정 조항이 불법, 무효 또는 시행 불가능한 경우, 해당 조항은 이 계약서에서 분리 가능한 것으로 간주되고, 나머지 조항의 유효성 및 시행 가능성에 영향을 주지 않습니다. 이 계약은 당사자 간의 완전 합의입니다</value>
  </data>
</root>